
services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - ./redis_data:/data

  worker:
    build:
      context: ./
      dockerfile: /backend/worker.Dockerfile  # Отдельный Dockerfile для worker
    depends_on:
      - redis
      - beat
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - celery_data:/usr/src/app

  beat:
    build:
      context: ./
      dockerfile: /backend/beat.Dockerfile  # Отдельный Dockerfile для beat
    depends_on:
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - celery_data:/usr/src/app

#  python_selenium:
#    build:
#      context: ./
#      dockerfile: ./backend/selenium.Dockerfile
#    container_name: python_selenium
#    env_file: .env
#    restart: always
#    environment:
#      - PYTHONPATH=/usr/src/app/

#volumes:
#  redis_data:
#  python_api:
#    build:
#      context: ./
#      dockerfile: ./backend/backend.Dockerfile
#    env_file: .env
#    restart: always
#    container_name: python_api
#    ports:
#      - "5000:5000"
#    environment:
#      - PYTHONPATH=/usr/src/app/
#    depends_on:
#      - postgres_db
##      - python_selenium
#
#
#
#  postgres_db:
#    image: postgres
#    restart: always
#    env_file: .env
#    environment:
#      POSTGRES_DB: ${DATABASE_NAME}
#      POSTGRES_USER: ${POSTGRES_USERNAME}
#      POSTGRES_PASSWORD: ${POSTGRES_PWD}
#    ports:
#      - '5432:5432'



#  redis:
#    image: redis:latest
#    container_name: redis_container
#    ports:
#      - "6380:6379"
#    volumes:
#      - ./backend/redis/redisdata:/data
#    deploy:
#      resources:
#        limits:
#          cpus: '0.50'
#          memory: 512M
#        reservations:
#          cpus: '0.25'
#          memory: 256M
#    command: redis-server
#    restart: unless-stopped
#    tty: true
#    stdin_open: true
volumes:
  celery_data: